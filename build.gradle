plugins {
	id 'java'
	id 'maven-publish'

	id 'idea'
	id 'eclipse'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-loader"

def ENV = System.getenv()

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
}

dependencies {
	// fabric-loader dependencies
	implementation 'com.google.guava:guava:21.0'
	implementation 'org.apache.logging.log4j:log4j-core:2.8.1'
	implementation 'org.apache.logging.log4j:log4j-api:2.8.1'

	implementation "org.ow2.asm:asm:${project.asm_version}"
	implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
	implementation "org.ow2.asm:asm-commons:${project.asm_version}"
	implementation "org.ow2.asm:asm-tree:${project.asm_version}"
	implementation "org.ow2.asm:asm-util:${project.asm_version}"

	// Required for mixin annotation processor
	annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"

	implementation('net.fabricmc:sponge-mixin:0.8.2+build.24') {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	implementation 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	implementation 'net.fabricmc:tiny-remapper:0.3.0.70'
	implementation 'net.fabricmc:access-widener:1.0.0'

	implementation 'com.google.jimfs:jimfs:1.2-fabric'
	implementation 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	implementation 'net.sf.jopt-simple:jopt-simple:5.0.3'

	testCompileOnly 'org.jetbrains:annotations:19.0.0'

	// Unit testing for mod metadata
	testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

jar {
	manifest {
		attributes (
			'Main-Class': 'net.fabricmc.loader.launch.knot.Knot'
		)
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	classifier = 'javadoc'
}
build.dependsOn javadocJar

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
				builtBy jar
			}
			artifact(sourcesJar) {
				builtBy sourcesJar
			}
			artifact javadocJar
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'

license {
	// Exclude gson since it is google's code, we just modify and bundle it
	exclude '**/JsonReader.java'
	exclude '**/JsonScope.java'
	exclude '**/JsonToken.java'
	exclude '**/MalformedJsonException.java'
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://raw.githubusercontent.com/GrossFabricHackers/maven/master/net/fabricmc/fabric-loader/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			logger.log(LogLevel.WARN, "${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion